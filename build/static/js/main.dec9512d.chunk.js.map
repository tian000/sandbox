{"version":3,"sources":["types.ts","utils/createTransferTransactionV0.ts","utils/detectPhantomMultiChainProvider.ts","constants.ts","utils/getChainData.ts","utils/getChainName.ts","utils/hexToRGB.ts","utils/numToHexString.ts","utils/pollEthereumTransactionReceipt.ts","utils/pollSolanaSignatureStatus.ts","utils/getEthereumSelectedAddress.ts","utils/sendTransactionOnEthereum.ts","utils/signAndSendTransactionOnSolana.ts","utils/signMessageOnEthereum.ts","utils/signMessageOnSolana.ts","utils/switchEthereumChain.ts","components/Button/index.tsx","components/Logs/Log.tsx","components/Logs/index.tsx","components/NoProvider/index.tsx","components/Sidebar/index.tsx","utils/connect.ts","utils/getEthereumChain.ts","utils/ensureEthereumChain.ts","App.tsx","utils/setupEvents.ts","index.tsx"],"names":["SupportedEVMChainIds","SupportedSolanaChainIds","SupportedChainNames","SupportedChainIcons","createTransferTransactionV0","publicKey","connection","getMinimumBalanceForRentExemption","minRent","getLatestBlockhash","then","res","blockhash","instructions","SystemProgram","transfer","fromPubkey","toPubkey","lamports","messageV0","TransactionMessage","payerKey","recentBlockhash","compileToV0Message","transactionV0","VersionedTransaction","detectPhantomMultiChainProvider","anyWindow","window","count","Promise","resolve","interval","setInterval","clearInterval","open","provider","phantom","ethereum","isPhantom","solana","PURPLE","WHITE","GRAY","REACT_GRAY","DARK_GRAY","LIGHT_GRAY","SUPPORTED_CHAINS","EthereumMainnet","name","icon","Ethereum","EthereumGoerli","PolygonMainnet","Polygon","PolygonMumbai","SolanaMainnet","Solana","SolanaTestnet","SolanaDevnet","getChainData","chainId","Error","getChainName","hexToRGB","hex","alpha","r","parseInt","slice","g","b","numToHexString","num","Number","toString","pollEthereumTransactionReceipt","txHash","createLog","providerType","status","method","message","messageTwo","request","params","txReceipt","blockNumber","pollSolanaSignatureStatus","signature","getSignatureStatus","value","confirmationStatus","hasReachedSufficientCommitment","charAt","toUpperCase","getEthereumSelectedAddress","address","sendTransactionOnEthereum","selectedAddress","transactionParameters","from","to","gas","console","warn","signAndSendTransactionOnSolana","transaction","signAndSendTransaction","signMessageOnEthereum","signedMessage","signMessageOnSolana","encodedMessage","TextEncoder","encode","signMessage","switchEthereumChain","response","Button","styled","button","Column","div","Row","StyledSpan","span","props","Method","p","Message","Log","React","memo","StyledSection","section","ClearLogsButton","PlaceholderMessage","Logs","connectedAccounts","logs","clearLogs","length","map","log","i","onClick","role","StyledMain","main","NoProvider","Main","Body","Link","a","attrs","href","target","rel","Subtitle","h5","Pre","pre","AccountRow","Badge","Divider","Tag","ChainIcon","img","height","ChainHeader","Sidebar","connectedMethods","connectedEthereumChainId","connect","src","alt","width","toBase58","style","marginRight","borderRadius","filter","chain","marginTop","wasEthereumConnected","accounts","isConnected","onlyIfTrusted","silentlyConnect","solanaPubKey","getEthereumChain","Object","values","includes","ensureEthereumChain","StyledApp","solanaNetwork","clusterApiUrl","Connection","useProps","useState","setLogs","useCallback","undefined","setChainId","useEffect","f","curChainId","useEthereumChainIdState","ethereumChainId","setEthereumChainId","setSelectedAddress","useEthereumSelectedAddress","ethereumSelectedAddres","setEthereumSelectedAddress","on","connectionInfo","newAccounts","setupEvents","disconnect","handleConnect","handleSignAndSendTransactionOnSolana","JSON","stringify","isEthereumChainIdReady","handleSendTransactionOnEthereum","handleSignMessageOnSolana","handleSignMessageOnEthereum","handleDisconnect","useMemo","StatelessApp","App","setProvider","getPhantomMultiChainProvider","phantomMultiChainProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dec9512d.chunk.js","sourcesContent":["import { PublicKey, SendOptions, Transaction, VersionedTransaction } from '@solana/web3.js';\n\ntype DisplayEncoding = 'utf8' | 'hex';\n\ntype SolanaEvent = 'connect' | 'disconnect' | 'accountChanged';\n\ntype EthereumEvent = 'connect' | 'disconnect' | 'accountsChanged' | 'chainChanged';\n\ntype SolanaRequestMethod =\n  | 'connect'\n  | 'disconnect'\n  | 'signAndSendTransaction'\n  | 'signTransaction'\n  | 'signAllTransactions'\n  | 'signMessage';\n\n/**\n * A subset of Phantom's supported JSON RPC methods\n * Phantom accepts most JSON RPC requests that are expected of wallets\n * For more information, please see: https://ethereum.org/en/developers/docs/apis/json-rpc/\n */\ntype EthereumRequestMethod =\n  | 'eth_getTransactionReceipt'\n  | 'eth_sendTransaction'\n  | 'eth_requestAccounts'\n  | 'personal_sign'\n  | 'eth_accounts'\n  | 'eth_chainId'\n  | 'wallet_switchEthereumChain';\n\ntype PhantomRequestMethod = SolanaRequestMethod | EthereumRequestMethod;\n\ninterface SolanaConnectOptions {\n  onlyIfTrusted: boolean;\n}\n\nexport interface PhantomSolanaProvider {\n  publicKey: PublicKey | null;\n  isConnected: boolean | null;\n  signAndSendTransaction: (\n    transaction: Transaction | VersionedTransaction,\n    opts?: SendOptions,\n  ) => Promise<{ signature: string; publicKey: PublicKey }>;\n  signTransaction: (transaction: Transaction | VersionedTransaction) => Promise<Transaction | VersionedTransaction>;\n  signAllTransactions: (\n    transactions: (Transaction | VersionedTransaction)[],\n  ) => Promise<(Transaction | VersionedTransaction)[]>;\n  signMessage: (message: Uint8Array | string, display?: DisplayEncoding) => Promise<any>;\n  connect: (opts?: Partial<SolanaConnectOptions>) => Promise<{ publicKey: PublicKey }>;\n  disconnect: () => Promise<void>;\n  on: (event: SolanaEvent, handler: (args: any) => void) => void;\n  request: (method: SolanaRequestMethod, params: any) => Promise<unknown>;\n}\n\n// TODO _events and _eventsCount\nexport interface PhantomEthereumProvider {\n  isMetaMask?: boolean; // will be removed after beta\n  isPhantom: boolean;\n  on: (event: EthereumEvent, handler: (args: any) => void) => void;\n  request: (args: { method: EthereumRequestMethod; params?: unknown[] | object }) => Promise<unknown>;\n  _metamask: {\n    isUnlocked: boolean;\n  };\n}\n\nexport interface PhantomInjectedProvider {\n  ethereum: PhantomEthereumProvider;\n  solana: PhantomSolanaProvider;\n}\n\nexport type PhantomProviderType = 'solana' | 'ethereum';\n\nexport type PhantomEvent = EthereumEvent | SolanaEvent;\n\nexport type Status = 'success' | 'warning' | 'error' | 'info';\n\nexport interface TLog {\n  providerType: PhantomProviderType;\n  status: Status;\n  method?: PhantomRequestMethod | Extract<PhantomEvent, 'accountChanged' | 'accountsChanged' | 'chainChanged'>;\n  message: string;\n  messageTwo?: string;\n}\n\nexport enum SupportedEVMChainIds {\n  EthereumMainnet = '0x1',\n  EthereumGoerli = '0x5',\n  PolygonMainnet = '0x89',\n  PolygonMumbai = '0x13881',\n}\n\nexport enum SupportedSolanaChainIds {\n  SolanaMainnet = 'solana:101',\n  SolanaTestnet = 'solana:102',\n  SolanaDevnet = 'solana:103',\n}\n\nexport enum SupportedChainNames {\n  EthereumMainnet = 'Ethereum Mainnet',\n  EthereumGoerli = 'Ethereum Goerli',\n  PolygonMainnet = 'Polygon Mainnet',\n  PolygonMumbai = 'Polygon Mumbai',\n  SolanaMainnet = 'Solana Mainnet Beta',\n  SolanaTestnet = 'Solana Testnet',\n  SolanaDevnet = 'Solana Devnet',\n}\n\nexport enum SupportedChainIcons {\n  Ethereum = '/images/ethereum.png',\n  Polygon = '/images/polygon.png',\n  Solana = '/images/solana.png',\n}\n","import { TransactionMessage, VersionedTransaction, SystemProgram, Connection, PublicKey } from '@solana/web3.js';\n\n/**\n * Creates an arbitrary transfer transactionV0 (Versioned Transaction)\n * @param   {String}      publicKey  a public key\n * @param   {Connection}  connection an RPC connection\n * @returns {VersionedTransaction}            a transactionV0\n */\nconst createTransferTransactionV0 = async (\n  publicKey: PublicKey,\n  connection: Connection\n): Promise<VersionedTransaction> => {\n  // connect to the cluster and get the minimum rent for rent exempt status\n  // perform this step to get an \"arbitrary\" amount to transfer\n  let minRent = await connection.getMinimumBalanceForRentExemption(0);\n\n  // get latest `blockhash`\n  let blockhash = await connection.getLatestBlockhash().then((res) => res.blockhash);\n\n  // create an array with your desired `instructions`\n  // in this case, just a transfer instruction\n  const instructions = [\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: publicKey,\n      lamports: minRent,\n    }),\n  ];\n\n  // create v0 compatible message\n  const messageV0 = new TransactionMessage({\n    payerKey: publicKey,\n    recentBlockhash: blockhash,\n    instructions,\n  }).compileToV0Message();\n\n  // make a versioned transaction\n  const transactionV0 = new VersionedTransaction(messageV0);\n\n  return transactionV0;\n};\n\nexport default createTransferTransactionV0;\n","import { PhantomInjectedProvider } from '../types';\n\nconst POLLING_INTERVAL = 1000; // One second\nconst MAX_POLLS = 5;\n\n/**\n * Polls the `window` object for Phantom's ethereum and solana providers\n * @returns {Promise<PhantomInjectedProvider | null>} an object containing Phantom's ethereum and solana providers if they are found. Returns null if they are not found.\n */\nconst detectPhantomMultiChainProvider = async (): Promise<PhantomInjectedProvider | null> => {\n  const anyWindow: any = window;\n  let count = 0;\n\n  return new Promise((resolve) => {\n    const interval = setInterval(() => {\n      if (count === MAX_POLLS) {\n        clearInterval(interval);\n        resolve(null);\n        window.open('https://phantom.app/', '_blank');\n      }\n\n      const provider = anyWindow.phantom;\n      if (provider?.ethereum?.isPhantom && provider?.solana?.isPhantom) {\n        clearInterval(interval);\n        resolve(provider);\n      }\n      count++;\n    }, POLLING_INTERVAL);\n  });\n};\n\nexport default detectPhantomMultiChainProvider;\n","import { SupportedChainIcons, SupportedChainNames, SupportedEVMChainIds, SupportedSolanaChainIds } from './types';\n\n// =============================================================================\n// Colors\n// =============================================================================\nexport const RED = '#EB3742';\nexport const YELLOW = '#FFDC62';\nexport const GREEN = '#21E56F';\nexport const BLUE = '#59cff7';\nexport const PURPLE = '#8A81F8';\nexport const WHITE = '#FFFFFF';\nexport const GRAY = '#777777';\nexport const REACT_GRAY = '#222222';\nexport const DARK_GRAY = '#333333';\nexport const LIGHT_GRAY = '#444444';\nexport const BLACK = '#000000';\n\n// =============================================================================\n// Chains\n// =============================================================================\n\nexport const SUPPORTED_CHAINS = {\n  [SupportedEVMChainIds.EthereumMainnet]: {\n    name: SupportedChainNames.EthereumMainnet,\n    icon: SupportedChainIcons.Ethereum,\n  },\n  [SupportedEVMChainIds.EthereumGoerli]: {\n    name: SupportedChainNames.EthereumGoerli,\n    icon: SupportedChainIcons.Ethereum,\n  },\n  [SupportedEVMChainIds.PolygonMainnet]: {\n    name: SupportedChainNames.PolygonMainnet,\n    icon: SupportedChainIcons.Polygon,\n  },\n  [SupportedEVMChainIds.PolygonMumbai]: {\n    name: SupportedChainNames.PolygonMumbai,\n    icon: SupportedChainIcons.Polygon,\n  },\n  [SupportedSolanaChainIds.SolanaMainnet]: {\n    name: SupportedChainNames.SolanaMainnet,\n    icon: SupportedChainIcons.Solana,\n  },\n  [SupportedSolanaChainIds.SolanaTestnet]: {\n    name: SupportedChainNames.SolanaTestnet,\n    icon: SupportedChainIcons.Solana,\n  },\n  [SupportedSolanaChainIds.SolanaDevnet]: {\n    name: SupportedChainNames.SolanaDevnet,\n    icon: SupportedChainIcons.Solana,\n  },\n};\n","import { SUPPORTED_CHAINS } from '../constants';\nimport { SupportedChainIcons, SupportedChainNames, SupportedEVMChainIds } from '../types';\n\n/**\n * Returns a chain's name and icon if it supported by Phantom\n * @param chainId an EVM chain ID\n * @returns an object containing the chain's icon and a human-readable name\n */\nconst getChainData = (chainId: SupportedEVMChainIds): { name: SupportedChainNames; icon: SupportedChainIcons } => {\n  if (!SUPPORTED_CHAINS[chainId]) {\n    throw new Error(`Unsupported Chain ID: ${chainId}`);\n  }\n  return SUPPORTED_CHAINS[chainId];\n};\n\nexport default getChainData;\n","import { SupportedChainNames, SupportedEVMChainIds } from '../types';\nimport getChainData from './getChainData';\n\n/**\n * Returns a chain ID's name if it supported by Phantom\n * @param chainId an EVM chain ID\n * @returns a string representing the chain's human-readable name\n */\nconst getChainName = (chainId: SupportedEVMChainIds): SupportedChainNames => getChainData(chainId).name;\n\nexport default getChainName;\n","/**\n * Returns a color from a hex string and alpha numeric\n * @param   {String} hex   a hex string\n * @param   {Number} alpha an alpha numeric\n * @returns {String}       a formatted rgba\n */\nconst hexToRGB = (hex: string, alpha: number) => {\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n\n  return `rgba(${r},${g},${b},${alpha})`;\n};\n\nexport default hexToRGB;\n","/**\n * Returns a hex string from a number\n * @param   {Number} num   a number\n * @returns {String}       a hex string\n */\nconst numToHexString = (num: number) => {\n  return '0x' + Number(num).toString(16);\n};\n\nexport default numToHexString;\n","import { PhantomEthereumProvider, TLog } from '../types';\n\nconst POLLING_INTERVAL = 3000; // three seconds\nconst MAX_POLLS = 10;\n\ninterface TransactionReceipt {\n  blockHash: string;\n  blockNumber: string;\n  contractAddress: null;\n  cumulativeGasUsed: string;\n  effectiveGasPrice: string;\n  from: string;\n  gasUsed: string;\n  logs: any[];\n  logsBloom: string;\n  status: string;\n  to: string;\n  transactionHash: string;\n  transactionIndex: string;\n  type: string;\n}\n\n/**\n * Polls for transaction receipt\n * @param   {String}     txHash  a transaction hash\n * @param   {PhantomEthereumProvider} provider a Phantom ethereum provider\n * @param   {Function}   createLog  a function to create log\n * @returns\n */\nconst pollEthereumTransactionReceipt = async (\n  txHash: string,\n  provider: PhantomEthereumProvider,\n  createLog: (log: TLog) => void\n): Promise<void> => {\n  let count = 0;\n\n  const interval = setInterval(async () => {\n    // Failed to confirm transaction in time\n    if (count === MAX_POLLS) {\n      clearInterval(interval);\n      createLog({\n        providerType: 'ethereum',\n        status: 'error',\n        method: 'eth_sendTransaction',\n        message: `Transaction: ${txHash}`,\n        messageTwo: `Failed to confirm transaction within ${MAX_POLLS} seconds. The transaction may or may not have succeeded.`,\n      });\n      return;\n    }\n\n    // @ts-ignore:next-line\n    const txReceipt: TransactionReceipt = await provider.request({\n      method: 'eth_getTransactionReceipt',\n      params: [txHash],\n    });\n\n    if (!txReceipt) {\n      createLog({\n        providerType: 'ethereum',\n        status: 'info',\n        method: 'eth_sendTransaction',\n        message: `Transaction: ${txHash}`,\n        messageTwo: `Status: Waiting on confirmation...`,\n      });\n      count++;\n      return;\n    }\n\n    // @ts-ignore:next-line\n    const { status, blockNumber } = txReceipt;\n\n    // Transaction is confirmed\n    if (status === '0x1') {\n      createLog({\n        providerType: 'ethereum',\n        status: 'success',\n        method: 'eth_sendTransaction',\n        message: `Transaction: ${txHash}`,\n        messageTwo: `Status: Confirmed in block: ${parseInt(blockNumber)}`,\n      });\n      clearInterval(interval);\n      return;\n    } else {\n      createLog({\n        providerType: 'ethereum',\n        status: 'error',\n        method: 'eth_sendTransaction',\n        message: `Transaction: ${txHash}`,\n        messageTwo: `Status: Failed`,\n      });\n    }\n  }, POLLING_INTERVAL);\n};\n\nexport default pollEthereumTransactionReceipt;\n","import { Connection } from '@solana/web3.js';\n\nimport { TLog } from '../types';\n\nconst POLLING_INTERVAL = 1000; // one second\nconst MAX_POLLS = 30;\n\n/**\n * Polls for transaction signature statuses\n * @param   {String}     signature  a transaction signature\n * @param   {Connection} connection an RPC connection\n * @param   {Function}   createLog  a function to create log\n * @returns\n */\nconst pollSolanaSignatureStatus = async (\n  signature: string,\n  connection: Connection,\n  createLog: (log: TLog) => void\n): Promise<void> => {\n  let count = 0;\n\n  const interval = setInterval(async () => {\n    // Failed to confirm transaction in time\n    if (count === MAX_POLLS) {\n      clearInterval(interval);\n      createLog({\n        providerType: 'solana',\n        status: 'error',\n        method: 'signAndSendTransaction',\n        message: `Transaction: ${signature}`,\n        messageTwo: `Failed to confirm transaction within ${MAX_POLLS} seconds. The transaction may or may not have succeeded.`,\n      });\n      return;\n    }\n\n    const { value } = await connection.getSignatureStatus(signature);\n    const confirmationStatus = value?.confirmationStatus;\n\n    if (confirmationStatus) {\n      const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\n\n      createLog({\n        providerType: 'solana',\n        status: hasReachedSufficientCommitment ? 'success' : 'info',\n        method: 'signAndSendTransaction',\n        message: `Transaction: ${signature}`,\n        messageTwo: `Status: ${confirmationStatus.charAt(0).toUpperCase() + confirmationStatus.slice(1)}`,\n      });\n\n      if (hasReachedSufficientCommitment) {\n        clearInterval(interval);\n        return;\n      }\n    } else {\n      createLog({\n        providerType: 'solana',\n        status: 'info',\n        method: 'signAndSendTransaction',\n        message: `Transaction: ${signature}`,\n        messageTwo: 'Status: Waiting on confirmation...',\n      });\n    }\n\n    count++;\n  }, POLLING_INTERVAL);\n};\n\nexport default pollSolanaSignatureStatus;\n","import { PhantomEthereumProvider } from '../types';\nimport { useEffect, useState } from 'react';\n\nexport const getEthereumSelectedAddress = async (provider: PhantomEthereumProvider): Promise<string | undefined> => {\n  const [address] = await provider.request({ method: 'eth_accounts', params: [] }) as (Array<string> | []);\n  return address;\n};\n\nexport const useEthereumSelectedAddress = (provider: PhantomEthereumProvider) => {\n  const [selectedAddress, setSelectedAddress] = useState<string | undefined>(undefined);\n  useEffect(() => {\n    const f = async () => {\n      if (!provider) {\n        return;\n      }\n      const selectedAddress = await getEthereumSelectedAddress(provider);\n      setSelectedAddress(selectedAddress);\n    };\n    f();\n  }, [provider]);\n\n  return [selectedAddress, setSelectedAddress] as const;\n};","import { PhantomEthereumProvider } from '../types';\nimport numToHexString from './numToHexString';\nimport { getEthereumSelectedAddress } from './getEthereumSelectedAddress';\n\n/**\n * Sends a transaction of 1 wei to yourself\n * @param provider a Phantom ethereum provider\n * @returns a transaction hash\n */\nconst sendTransactionOnEthereum = async (provider: PhantomEthereumProvider): Promise<string> => {\n  try {\n    const selectedAddress = await getEthereumSelectedAddress(provider);\n    /**\n     * Required parameters for a simple transfer of 1 wei\n     * Phantom will automatically handle nonce & chainId.\n     * gasPrice will be handled by Phantom and customizable by end users during confirmation\n     */\n    const transactionParameters = {\n      from: selectedAddress, // must match user's active address\n      to: selectedAddress, // required except during contract publications\n      gas: numToHexString(30000), // the max amount of gas to be used in the tx\n      value: numToHexString(1), // only required when transferring ether. in this case, send 1 wei\n    };\n\n    const txHash = await provider.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters],\n    });\n    if (typeof txHash === 'string') return txHash;\n    throw new Error('did not get back a transaction hash');\n  } catch (error) {\n    console.warn(error);\n    throw new Error(error.message);\n  }\n};\n\nexport default sendTransactionOnEthereum;\n","import { Transaction, VersionedTransaction } from '@solana/web3.js';\n\nimport { PhantomSolanaProvider } from '../types';\n\n/**\n * Signs and sends transaction\n * @param   {PhantomSolanaProvider} provider    a Phantom solana provider\n * @param   {Transaction}     transaction a transaction to sign\n * @returns {Transaction}                 a signed transaction\n */\nconst signAndSendTransactionOnSolana = async (\n  provider: PhantomSolanaProvider,\n  transaction: Transaction | VersionedTransaction\n): Promise<string> => {\n  try {\n    const { signature } = await provider.signAndSendTransaction(transaction);\n    return signature;\n  } catch (error) {\n    console.warn(error);\n    throw new Error(error.message);\n  }\n};\n\nexport default signAndSendTransactionOnSolana;\n","import { PhantomEthereumProvider } from '../types';\nimport { getEthereumSelectedAddress } from './getEthereumSelectedAddress';\n\n/**\n * Signs a message on Ethereum\n * @param provider a Phantom ethereum provider\n * @param message a message to sign\n * @returns a signed message is hex string format\n */\nconst signMessageOnEthereum = async (provider: PhantomEthereumProvider, message: string): Promise<string> => {\n  try {\n    const selectedAddress = await getEthereumSelectedAddress(provider);\n\n    const signedMessage = await provider.request({\n      method: 'personal_sign',\n      params: [message, selectedAddress],\n    });\n    if (typeof signedMessage === 'string') return signedMessage;\n    throw new Error('personal_sign did not respond with a signature');\n  } catch (error) {\n    console.warn(error);\n    throw new Error(error.message);\n  }\n};\n\nexport default signMessageOnEthereum;\n","import { PhantomSolanaProvider } from '../types';\n\n/**\n * Signs a message on Solana\n * @param   {PhantomSolanaProvider} provider a Phantom Provider\n * @param   {String}          message  a message to sign\n * @returns {Any}                      TODO(get type)\n */\nconst signMessageOnSolana = async (provider: PhantomSolanaProvider, message: string): Promise<string> => {\n  try {\n    const encodedMessage = new TextEncoder().encode(message);\n    const signedMessage = await provider.signMessage(encodedMessage);\n    return signedMessage;\n  } catch (error) {\n    console.warn(error);\n    throw new Error(error.message);\n  }\n};\n\nexport default signMessageOnSolana;\n","import { PhantomEthereumProvider, SupportedEVMChainIds } from '../types';\n\n/**\n * Switches the ethereum provider to a new chainId\n * @param provider a Phantom ethereum provider\n * @param chainId an EVM chainId to switch to\n * @returns null if successful\n */\nconst switchEthereumChain = async (\n  provider: PhantomEthereumProvider,\n  chainId: SupportedEVMChainIds\n): Promise<unknown> => {\n  try {\n    const response = await provider.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId }],\n    });\n    return response;\n  } catch (error) {\n    console.warn(error);\n    throw new Error(error.message);\n  }\n};\n\nexport default switchEthereumChain;\n","import styled from 'styled-components';\n\nimport { WHITE, DARK_GRAY, LIGHT_GRAY } from '../../constants';\n\nimport { hexToRGB } from '../../utils';\n\nconst Button = styled.button`\n  cursor: pointer;\n  width: 100%;\n  color: ${WHITE};\n  background-color: ${DARK_GRAY};\n  padding: 15px 10px;\n  font-weight: 600;\n  outline: 0;\n  border: 0;\n  border-radius: 6px;\n  user-select: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  &:hover {\n    background-color: ${hexToRGB(LIGHT_GRAY, 0.9)};\n  }\n  &:focus-visible&:not(:hover) {\n    background-color: ${hexToRGB(LIGHT_GRAY, 0.8)};\n  }\n  &:active {\n    background-color: ${LIGHT_GRAY};\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Status, TLog } from '../../types';\n\nimport { RED, YELLOW, GREEN, BLUE, PURPLE } from '../../constants';\n\n// =============================================================================\n// Styled Components\n// =============================================================================\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  line-height: 1.5;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst StyledSpan = styled.span<{ status: Status }>`\n  color: ${(props) => {\n    switch (props.status) {\n      case 'success':\n        return GREEN;\n      case 'warning':\n        return YELLOW;\n      case 'error':\n        return RED;\n      case 'info':\n        return BLUE;\n    }\n  }};\n  margin-right: 5px;\n`;\n\nconst Method = styled.p`\n  color: ${PURPLE};\n  margin-right: 10px;\n`;\n\nconst Message = styled.p`\n  overflow-wrap: break-word;\n`;\n\n// =============================================================================\n// Main Component\n// =============================================================================\n\nconst Log = React.memo((props: TLog) => (\n  <Column>\n    <Row>\n      <StyledSpan status={props.status}>\n        {'>'} {props.status}\n      </StyledSpan>\n      {props.providerType && <Method>{props.providerType}</Method>}\n      {props.method && <Method>[{props.method}]</Method>}\n    </Row>\n    <Message>{props.message}</Message>\n    {props.messageTwo && <Message>{props.messageTwo}</Message>}\n  </Column>\n));\n\nexport default Log;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { TLog } from '../../types';\n\nimport { BLACK, GRAY } from '../../constants';\n\nimport Button from '../Button';\nimport Log from './Log';\nimport { ConnectedAccounts } from '../../App';\n\n// =============================================================================\n// Styled Components\n// =============================================================================\n\nconst StyledSection = styled.section`\n  position: relative;\n  flex: 2;\n  padding: 20px;\n  background-color: ${BLACK};\n  overflow: auto;\n  font-family: monospace;\n`;\n\nconst ClearLogsButton = styled(Button)`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 100px;\n`;\n\nconst PlaceholderMessage = styled.p`\n  color: ${GRAY};\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  span {\n    margin-right: 10px;\n  }\n`;\n\n// =============================================================================\n// Typedefs\n// =============================================================================\n\ninterface Props {\n  connectedAccounts: ConnectedAccounts;\n  logs: TLog[];\n  clearLogs: () => void;\n}\n\n// =============================================================================\n// Main Component\n// =============================================================================\n\nconst Logs = React.memo((props: Props) => {\n  const { connectedAccounts, logs, clearLogs } = props;\n  const { solana } = connectedAccounts;\n  return (\n    <StyledSection>\n      {logs.length > 0 ? (\n        <>\n          {logs.map((log, i) => (\n            <Log key={`${log.status}-${log.method}-${i}`} {...log} />\n          ))}\n          <ClearLogsButton onClick={clearLogs}>Clear Logs</ClearLogsButton>\n        </>\n      ) : (\n        <Row>\n          <span>{'>'}</span>\n          <PlaceholderMessage>\n            {solana ? (\n              // connected\n              <>\n                Click a button and watch magic happen...{' '}\n                <span role=\"img\" aria-label=\"Sparkles Emoji\">\n                  ✨\n                </span>\n              </>\n            ) : (\n              // not connected\n              <>\n                Welcome to the Phantom sandbox. Connect to your Phantom wallet and play around...{' '}\n                <span role=\"img\" aria-label=\"Ghost Emoji\">\n                  👻\n                </span>\n              </>\n            )}\n          </PlaceholderMessage>\n        </Row>\n      )}\n    </StyledSection>\n  );\n});\n\nexport default Logs;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { REACT_GRAY } from '../../constants';\n\n// =============================================================================\n// Styled Components\n// =============================================================================\n\nconst StyledMain = styled.main`\n  padding: 20px;\n  height: 100vh;\n  background-color: ${REACT_GRAY};\n`;\n\n// =============================================================================\n// Main Component\n// =============================================================================\n\n// TODO: @PHANTOM-TEAM: Let's improve this UI\nconst NoProvider = () => {\n  return (\n    <StyledMain>\n      <h2>Could not find a provider</h2>\n    </StyledMain>\n  );\n};\n\nexport default NoProvider;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { DARK_GRAY, GRAY, LIGHT_GRAY, PURPLE, REACT_GRAY, WHITE } from '../../constants';\nimport { hexToRGB } from '../../utils';\nimport Button from '../Button';\nimport { ConnectedAccounts, ConnectedMethods } from '../../App';\nimport { SupportedChainIcons, SupportedChainNames, SupportedEVMChainIds } from '../../types';\n\n// =============================================================================\n// Styled Components\n// =============================================================================\n\nconst Main = styled.main`\n  position: relative;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 20px;\n  align-items: center;\n  background-color: ${REACT_GRAY};\n\n  > * {\n    margin-bottom: 10px;\n  }\n\n  @media (max-width: 768px) {\n    width: 100%;\n    height: auto;\n  }\n`;\n\nconst Body = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  button {\n    margin-bottom: 15px;\n  }\n`;\n\nconst Link = styled.a.attrs({\n  href: 'https://phantom.app/',\n  target: '_blank',\n  rel: 'noopener noreferrer',\n})`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  text-decoration: none;\n  margin-bottom: 15px;\n  // margin-bottom: 30px;\n  padding: 5px;\n\n  &:focus-visible {\n    outline: 2px solid ${hexToRGB(GRAY, 0.5)};\n    border-radius: 6px;\n  }\n`;\n\nconst Subtitle = styled.h5`\n  color: ${GRAY};\n  font-weight: 400;\n`;\n\nconst Pre = styled.pre`\n  margin-bottom: 5px;\n  margin-right: auto;\n`;\n\nconst AccountRow = styled.div`\n  display: flex;\n  margin-bottom: 8px;\n\n  :last-of-type {\n    margin-bottom: 0;\n  }\n`;\n\nconst Badge = styled.div`\n  margin: 0;\n  padding: 10px;\n  width: 100%;\n  color: ${PURPLE};\n  background-color: ${hexToRGB(PURPLE, 0.2)};\n  font-size: 14px;\n  border-radius: 0 6px 6px 0;\n  @media (max-width: 400px) {\n    width: 280px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  @media (max-width: 320px) {\n    width: 220px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  ::selection {\n    color: ${WHITE};\n    background-color: ${hexToRGB(PURPLE, 0.5)};\n  }\n\n  ::-moz-selection {\n    color: ${WHITE};\n    background-color: ${hexToRGB(PURPLE, 0.5)};\n  }\n`;\n\nconst Divider = styled.div`\n  border: 1px solid ${DARK_GRAY};\n  height: 1px;\n  margin: 20px 0;\n`;\n\nconst Tag = styled.p`\n  text-align: center;\n  color: ${GRAY};\n\n  a {\n    color: ${PURPLE};\n    text-decoration: none;\n\n    ::selection {\n      color: ${WHITE};\n      background-color: ${hexToRGB(PURPLE, 0.5)};\n    }\n\n    ::-moz-selection {\n      color: ${WHITE};\n      background-color: ${hexToRGB(PURPLE, 0.5)};\n    }\n  }\n\n  @media (max-width: 320px) {\n    font-size: 14px;\n  }\n\n  ::selection {\n    color: ${WHITE};\n    background-color: ${hexToRGB(PURPLE, 0.5)};\n  }\n\n  ::-moz-selection {\n    color: ${WHITE};\n    background-color: ${hexToRGB(PURPLE, 0.5)};\n  }\n`;\n\nconst Toggle = styled.button`\n  cursor: pointer;\n  width: 100%;\n  color: ${WHITE};\n  background-color: ${DARK_GRAY};\n  // padding: 15px 10px;\n  font-weight: 600;\n  outline: 0;\n  border: 0;\n  // border-radius: 6px;\n  user-select: none;\n  // display: flex;\n  // align-items: center;\n  // justify-content: center;\n  // position: relative;\n  &:hover {\n    background-color: ${hexToRGB(LIGHT_GRAY, 0.9)};\n  }\n\n  &:focus-visible &:not(:hover) {\n    background-color: ${hexToRGB(LIGHT_GRAY, 0.8)};\n  }\n\n  &:active {\n    background-color: ${LIGHT_GRAY};\n  }\n`;\n\nconst ChainIcon = styled.img`\n  height: ${(props) => props.height};\n  width: ${(props) => props.height};\n  border-radius: 6px 0 0 6px;\n`;\n\nconst ChainHeader = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 5px 0 10px;\n`;\n\n// =============================================================================\n// Typedefs\n// =============================================================================\n\ninterface Props {\n  connectedMethods: ConnectedMethods[];\n  connectedEthereumChainId: SupportedEVMChainIds | null;\n  connectedAccounts: ConnectedAccounts;\n  connect: () => Promise<void>;\n}\n\n// =============================================================================\n// Main Component\n// =============================================================================\nconst Sidebar = React.memo((props: Props) => {\n  const { connectedAccounts, connectedEthereumChainId, connectedMethods, connect } = props;\n  return (\n    <Main>\n      <Body>\n        <Link>\n          <img src='https://phantom.app/img/phantom-logo.svg' alt='Phantom' width='200' />\n          <Subtitle>Multi-chain Sandbox</Subtitle>\n        </Link>\n        {connectedAccounts?.solana ? (\n          // connected\n          <>\n            <div>\n              <Pre>Connected as</Pre>\n              <AccountRow>\n                <ChainIcon src={SupportedChainIcons.Ethereum} height='36px' />\n                <Badge>{connectedAccounts?.ethereum}</Badge>\n              </AccountRow>\n              <AccountRow>\n                <ChainIcon src={SupportedChainIcons.Polygon} height='36px' />\n                <Badge>{connectedAccounts?.ethereum}</Badge>\n              </AccountRow>\n              <AccountRow>\n                <ChainIcon src={SupportedChainIcons.Solana} height='36px' />\n                <Badge>{connectedAccounts?.solana?.toBase58()}</Badge>\n              </AccountRow>\n              <Divider />\n            </div>\n            <ChainHeader>\n              <ChainIcon\n                src={SupportedChainIcons.Ethereum}\n                height='16px'\n                style={{ marginRight: '6px', borderRadius: '6px' }}\n              />\n              <Tag>{SupportedChainNames.EthereumGoerli}</Tag>\n            </ChainHeader>\n            {connectedMethods\n              .filter((method) => method.chain === 'ethereum')\n              .map((method, i) => (\n                <Button data-test-id={`ethereum-goerli-${method.name}`}\n                        key={`${method.name}-${i}`}\n                        onClick={() => method.onClick(SupportedEVMChainIds.EthereumGoerli)}>\n                  {method.name}\n                </Button>\n              ))}\n            <ChainHeader>\n              <ChainIcon\n                src={SupportedChainIcons.Polygon}\n                height='16px'\n                style={{ marginRight: '6px', borderRadius: '6px' }}\n              />\n              <Tag>{SupportedChainNames.PolygonMainnet}</Tag>\n            </ChainHeader>\n            {connectedMethods\n              .filter((method) => method.chain === 'ethereum')\n              .map((method, i) => (\n                <Button\n                  data-test-id={`polygon-mainnet-${method.name}`}\n                  key={`${method.name}-${i}`}\n                  onClick={() => method.onClick(SupportedEVMChainIds.PolygonMainnet)}\n                >\n                  {method.name}\n                </Button>\n              ))}\n            <ChainHeader>\n              <ChainIcon\n                src={SupportedChainIcons.Solana}\n                height='16px'\n                style={{ marginRight: '6px', borderRadius: '6px' }}\n              />\n              <Tag>{SupportedChainNames.SolanaMainnet}</Tag>\n            </ChainHeader>\n            {connectedMethods\n              .filter((method) => method.chain === 'solana')\n              .map((method, i) => (\n                <Button\n                  data-test-id={`solana-${method.name}`}\n                  key={`${method.name}-${i}`} onClick={method.onClick}>\n                  {method.name}\n                </Button>\n              ))}\n          </>\n        ) : (\n          // not connected\n          <Button data-testid='connect-to-phantom' onClick={connect} style={{ marginTop: '15px' }}>\n            Connect to Phantom\n          </Button>\n        )}\n      </Body>\n      {/* 😊 💕  */}\n      <Tag>\n        Made with{' '}\n        <span role='img' aria-label='Red Heart Emoji'>\n          ❤️\n        </span>{' '}\n        by the <a href='https://phantom.app'>Phantom</a> team\n      </Tag>\n    </Main>\n  );\n});\n\nexport default Sidebar;\n","import { PhantomInjectedProvider, TLog } from '../types';\nimport { PublicKey } from '@solana/web3.js';\nimport { getEthereumSelectedAddress } from './getEthereumSelectedAddress';\n\n// MULTI-CHAIN PROVIDER TIP: Connect using the ethereum provider first for the best experience\n// use onlyIfTrusted on the solana connect request, so we don't double pop up.\nexport const connect = async ({ solana, ethereum }: PhantomInjectedProvider, createLog: (log: TLog) => void) => {\n  let wasEthereumConnected: boolean | undefined;\n  try {\n    wasEthereumConnected = !!await getEthereumSelectedAddress(ethereum);\n    if (!wasEthereumConnected) {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      createLog({\n        providerType: 'ethereum',\n        status: 'success',\n        method: 'eth_requestAccounts',\n        message: `Connected to account ${accounts[0]}`,\n      });\n    }\n  } catch (error) {\n    createLog({\n      providerType: 'ethereum',\n      status: 'error',\n      method: 'eth_requestAccounts',\n      message: error.message,\n    });\n  }\n\n  try {\n    if (!wasEthereumConnected && !solana.isConnected) {\n      // If ethereum was not connected then we would have showed the EVM pop up, so we should not show the solana pop up.\n      await solana.connect({ onlyIfTrusted: true });\n    } else if (wasEthereumConnected && !solana.isConnected) {\n      // If ethereum was already connected, then we should show the pop up because the solana provider is not connected.\n      await solana.connect();\n    }\n  } catch (error) {\n    createLog({\n      providerType: 'solana',\n      status: 'error',\n      method: 'connect',\n      message: error.message,\n    });\n  }\n};\n\n// Similar to solana.connect({onlyIfTrusted: true}) but for multi-chain\n// MULTI-CHAIN PROVIDER TIP: Must use the solana provider first, and only the call eth provider if the solana call is successful\nexport const silentlyConnect = async (\n  {\n    solana,\n    ethereum,\n  }: PhantomInjectedProvider,\n  createLog: (log: TLog) => void,\n) => {\n  let solanaPubKey: { publicKey: PublicKey } | undefined;\n  try {\n    solanaPubKey = await solana.connect({ onlyIfTrusted: true });\n  } catch (error) {\n    createLog({\n      providerType: 'solana',\n      status: 'error',\n      method: 'connect',\n      message: 'encountered error while silent connecting: ' + error.message,\n    });\n  }\n\n  if (solanaPubKey) {\n    try {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      createLog({\n        providerType: 'ethereum',\n        status: 'success',\n        method: 'eth_requestAccounts',\n        message: `Connected to account ${accounts[0]}`,\n      });\n    } catch (error) {\n      createLog({\n        providerType: 'ethereum',\n        status: 'error',\n        method: 'eth_requestAccounts',\n        message: 'encountered error while silent connecting: ' + error.message,\n      });\n    }\n  }\n};","import { PhantomEthereumProvider, SupportedEVMChainIds } from '../types';\nimport { useEffect, useState } from 'react';\n\n/**\n * getes the ethereum provider to a new chainId\n * @param provider a Phantom ethereum provider\n * @param chainId an EVM chainId to get to\n * @returns null if successful\n */\nconst getEthereumChain = async (\n  provider: PhantomEthereumProvider,\n): Promise<SupportedEVMChainIds> => {\n  try {\n    const chainId = await provider.request({\n      method: 'eth_chainId',\n      params: [],\n    });\n    if (!Object.values(SupportedEVMChainIds).includes(chainId as SupportedEVMChainIds)) {\n      throw new Error('got unexpected chain ID:' + chainId);\n    }\n    return chainId as SupportedEVMChainIds;\n  } catch (error) {\n    console.warn(error);\n    throw new Error(error.message);\n  }\n};\n\nexport const useEthereumChainIdState = (provider: PhantomEthereumProvider | null) => {\n  const [chainId, setChainId] = useState<SupportedEVMChainIds | undefined>(undefined);\n  useEffect(() => {\n    const f = async () => {\n      if (!provider) {\n        return;\n      }\n      const curChainId = await getEthereumChain(provider);\n      setChainId(curChainId);\n    };\n    f();\n  }, [provider]);\n\n  return [chainId, setChainId] as const;\n};\n\nexport default getEthereumChain;\n","// Switches chain to the requested chain ID if necessary, rejects if unsuccessful.\nimport { PhantomEthereumProvider, SupportedEVMChainIds, TLog } from '../types';\nimport getEthereumChain from './getEthereumChain';\nimport switchEthereumChain from './switchEthereumChain';\nimport { getChainName } from './index';\n\nexport const ensureEthereumChain = async (\n  provider: PhantomEthereumProvider,\n  chainId: SupportedEVMChainIds,\n  createLog: (log: TLog) => void,\n): Promise<boolean> => {\n  const curChainId = await getEthereumChain(provider);\n  if (curChainId === chainId) {\n    return true;\n  }\n\n  try {\n    await switchEthereumChain(provider, chainId);\n    createLog({\n      providerType: 'ethereum',\n      status: 'success',\n      method: 'wallet_switchEthereumChain',\n      message: `Switched to ${getChainName(chainId)} (Chain ID: ${chainId})`,\n    });\n    return true;\n  } catch (error) {\n    createLog({\n      providerType: 'ethereum',\n      status: 'error',\n      method: 'wallet_switchEthereumChain',\n      message: error.message,\n    });\n    return false;\n  }\n};","/**\n * @DEV: If the sandbox is throwing dependency errors, chances are you need to clear your browser history.\n * This will trigger a re-install of the dependencies in the sandbox – which should fix things right up.\n * Alternatively, you can fork this sandbox to refresh the dependencies manually.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { clusterApiUrl, Connection, PublicKey } from '@solana/web3.js';\n\nimport {\n  createTransferTransactionV0,\n  detectPhantomMultiChainProvider,\n  getChainName,\n  pollEthereumTransactionReceipt,\n  pollSolanaSignatureStatus,\n  sendTransactionOnEthereum,\n  signAndSendTransactionOnSolana,\n  signMessageOnEthereum,\n  signMessageOnSolana,\n} from './utils';\n\nimport { PhantomInjectedProvider, SupportedEVMChainIds, TLog } from './types';\n\nimport { Logs, NoProvider, Sidebar } from './components';\nimport { connect, silentlyConnect } from './utils/connect';\nimport { setupEvents } from './utils/setupEvents';\nimport { ensureEthereumChain } from './utils/ensureEthereumChain';\nimport { useEthereumChainIdState } from './utils/getEthereumChain';\nimport { useEthereumSelectedAddress } from './utils/getEthereumSelectedAddress';\n\n// =============================================================================\n// Styled Components\n// =============================================================================\n\nconst StyledApp = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: 100vh;\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\n// =============================================================================\n// Constants\n// =============================================================================\n\nconst solanaNetwork = clusterApiUrl('devnet');\nconst connection = new Connection(solanaNetwork);\nconst message = 'To avoid digital dognappers, sign below to authenticate with CryptoCorgis.';\n\n// =============================================================================\n// Typedefs\n// =============================================================================\n\nexport type ConnectedAccounts = {\n  solana: PublicKey | null;\n  ethereum: string | null;\n};\n\nexport type ConnectedMethods =\n  | {\n  chain: string;\n  name: string;\n  onClick: (props?: any) => Promise<string>;\n}\n  | {\n  chain: string;\n  name: string;\n  onClick: (chainId?: any) => Promise<void | boolean>;\n};\n\ninterface Props {\n  connectedAccounts: ConnectedAccounts;\n  connectedEthereumChainId: SupportedEVMChainIds | undefined;\n  connectedMethods: ConnectedMethods[];\n  handleConnect: () => Promise<void>;\n  logs: TLog[];\n  clearLogs: () => void;\n}\n\n// =============================================================================\n// Hooks\n// =============================================================================\n/**\n * @DEVELOPERS\n * The fun stuff!\n */\nconst useProps = (provider: PhantomInjectedProvider | null): Props => {\n  /** Logs to display in the Sandbox console */\n  const [logs, setLogs] = useState<TLog[]>([]);\n\n  const createLog = useCallback(\n    (log: TLog) => {\n      return setLogs((logs) => [...logs, log]);\n    },\n    [setLogs],\n  );\n\n  const clearLogs = useCallback(() => {\n    setLogs([]);\n  }, [setLogs]);\n\n  const [ethereumChainId, setEthereumChainId] = useEthereumChainIdState(provider?.ethereum);\n  const [ethereumSelectedAddres, setEthereumSelectedAddress] = useEthereumSelectedAddress(provider?.ethereum);\n\n  /** Side effects to run once providers are detected */\n  useEffect(() => {\n    if (!provider) return;\n    const { solana, ethereum } = provider;\n\n    // attempt to eagerly connect on initial startup\n    silentlyConnect({ solana, ethereum }, createLog);\n    setupEvents({ solana, ethereum }, createLog, setEthereumChainId, setEthereumSelectedAddress);\n\n    return () => {\n      solana.disconnect();\n    };\n  }, [provider, createLog, setEthereumChainId, setEthereumSelectedAddress]);\n\n  /** Connect to both Solana and Ethereum Providers */\n  const handleConnect = useCallback(async () => {\n    if (!provider) return;\n    const { solana, ethereum } = provider;\n\n    await connect({ solana, ethereum }, createLog);\n\n    // Immediately switch to Ethereum Goerli for Sandbox purposes\n    await ensureEthereumChain(ethereum, SupportedEVMChainIds.EthereumGoerli, createLog);\n  }, [provider, createLog]);\n\n  /** SignAndSendTransaction via Solana Provider */\n  const handleSignAndSendTransactionOnSolana = useCallback(async () => {\n    if (!provider) return;\n    const { solana } = provider;\n    try {\n      // create a v0 transaction\n      const transactionV0 = await createTransferTransactionV0(solana.publicKey, connection);\n      createLog({\n        providerType: 'solana',\n        status: 'info',\n        method: 'signAndSendTransaction',\n        message: `Requesting signature for ${JSON.stringify(transactionV0)}`,\n      });\n      // sign and submit the transaction via Phantom\n      const signature = await signAndSendTransactionOnSolana(solana, transactionV0);\n      createLog({\n        providerType: 'solana',\n        status: 'info',\n        method: 'signAndSendTransaction',\n        message: `Signed and submitted transaction ${signature}.`,\n      });\n      // poll tx status until it is confirmed or 30 seconds pass\n      pollSolanaSignatureStatus(signature, connection, createLog);\n    } catch (error) {\n      createLog({\n        providerType: 'solana',\n        status: 'error',\n        method: 'signAndSendTransaction',\n        message: error.message,\n      });\n    }\n  }, [provider, createLog]);\n\n  /**\n   * Switch Ethereum Chains\n   * When a user connects to a dApp, Phantom considers them connected on all chains\n   * When the Ethereum provider's chainId is changed, Phantom will not prompt the user for approval\n   * */\n  const isEthereumChainIdReady = useCallback(\n    async (chainId: SupportedEVMChainIds) => {\n      if (!provider) return false;\n      const { ethereum } = provider;\n      return await ensureEthereumChain(ethereum, chainId, createLog);\n    },\n    [provider, createLog],\n  );\n\n  /** SendTransaction via Ethereum Provider */\n  const handleSendTransactionOnEthereum = useCallback(\n    async (chainId) => {\n      // set ethereum provider to the correct chainId\n      const ready = await isEthereumChainIdReady(chainId);\n      if (!ready) return;\n      const { ethereum } = provider;\n      try {\n        // send the transaction up to the network\n        const txHash = await sendTransactionOnEthereum(ethereum);\n        createLog({\n          providerType: 'ethereum',\n          status: 'info',\n          method: 'eth_sendTransaction',\n          message: `Sending transaction ${txHash} on ${ethereumChainId ? getChainName(ethereumChainId) : 'undefined'}`,\n        });\n        // poll tx status until it is confirmed in a block, fails, or 30 seconds pass\n        pollEthereumTransactionReceipt(txHash, ethereum, createLog);\n      } catch (error) {\n        createLog({\n          providerType: 'ethereum',\n          status: 'error',\n          method: 'eth_sendTransaction',\n          message: error.message,\n        });\n      }\n    },\n    [provider, createLog, isEthereumChainIdReady, ethereumChainId],\n  );\n\n  // /** SignMessage via Solana Provider */\n  const handleSignMessageOnSolana = useCallback(async () => {\n    if (!provider) return;\n    const { solana } = provider;\n    try {\n      const signedMessage = await signMessageOnSolana(solana, message);\n      createLog({\n        providerType: 'solana',\n        status: 'success',\n        method: 'signMessage',\n        message: `Message signed: ${JSON.stringify(signedMessage)}`,\n      });\n      return signedMessage;\n    } catch (error) {\n      createLog({\n        providerType: 'solana',\n        status: 'error',\n        method: 'signMessage',\n        message: error.message,\n      });\n    }\n  }, [provider, createLog]);\n\n  /** SignMessage via Ethereum Provider */\n  const handleSignMessageOnEthereum = useCallback(\n    async (chainId) => {\n      // set ethereum provider to the correct chainId\n      const ready = await isEthereumChainIdReady(chainId);\n      if (!ready) return;\n      const { ethereum } = provider;\n      try {\n        const signedMessage = await signMessageOnEthereum(ethereum, message);\n        createLog({\n          providerType: 'ethereum',\n          status: 'success',\n          method: 'personal_sign',\n          message: `Message signed: ${signedMessage}`,\n        });\n        return signedMessage;\n      } catch (error) {\n        createLog({\n          providerType: 'ethereum',\n          status: 'error',\n          method: 'personal_sign',\n          message: error.message,\n        });\n      }\n    },\n    [provider, createLog, isEthereumChainIdReady],\n  );\n\n  /**\n   * Disconnect from Solana\n   * At this time, there is no way to programmatically disconnect from Ethereum\n   * MULTI-CHAIN PROVIDER TIP: You can only disconnect on the solana provider. But after when disconnecting your should use the\n   * multi-chain connect method to reconnect.\n   */\n  const handleDisconnect = useCallback(async () => {\n    if (!provider) return;\n    const { solana } = provider;\n    try {\n      await solana.disconnect();\n    } catch (error) {\n      createLog({\n        providerType: 'solana',\n        status: 'error',\n        method: 'disconnect',\n        message: error.message,\n      });\n    }\n  }, [provider, createLog]);\n\n  const connectedMethods = useMemo(() => {\n    return [\n      {\n        chain: 'solana',\n        name: 'Sign and Send Transaction',\n        onClick: handleSignAndSendTransactionOnSolana,\n      },\n      {\n        chain: 'ethereum',\n        name: 'Send Transaction',\n        onClick: handleSendTransactionOnEthereum,\n      },\n      {\n        chain: 'solana',\n        name: 'Sign Message',\n        onClick: handleSignMessageOnSolana,\n      },\n      {\n        chain: 'ethereum',\n        name: 'Sign Message',\n        onClick: handleSignMessageOnEthereum,\n      },\n      {\n        chain: 'solana',\n        name: 'Disconnect',\n        onClick: handleDisconnect,\n      },\n    ];\n  }, [\n    handleSignAndSendTransactionOnSolana,\n    handleSendTransactionOnEthereum,\n    handleSignMessageOnSolana,\n    handleSignMessageOnEthereum,\n    handleDisconnect,\n  ]);\n\n  return {\n    connectedAccounts: {\n      solana: provider?.solana?.publicKey,\n      ethereum: ethereumSelectedAddres,\n    },\n    connectedEthereumChainId: ethereumChainId,\n    connectedMethods,\n    handleConnect,\n    logs,\n    clearLogs,\n  };\n};\n\n// =============================================================================\n// Stateless Component\n// =============================================================================\n\nconst StatelessApp = React.memo((props: Props) => {\n  const { connectedAccounts, connectedEthereumChainId, connectedMethods, handleConnect, logs, clearLogs } = props;\n\n  return (\n    <StyledApp>\n      <Sidebar\n        connectedAccounts={connectedAccounts}\n        connectedEthereumChainId={connectedEthereumChainId}\n        connectedMethods={connectedMethods}\n        connect={handleConnect}\n      />\n      <Logs connectedAccounts={connectedAccounts} logs={logs} clearLogs={clearLogs} />\n    </StyledApp>\n  );\n});\n\n// =============================================================================\n// Main Component\n// =============================================================================\n\nconst App = () => {\n  const [provider, setProvider] = useState<PhantomInjectedProvider | null>(null);\n  const props = useProps(provider);\n\n  useEffect(() => {\n    const getPhantomMultiChainProvider = async () => {\n      const phantomMultiChainProvider = await detectPhantomMultiChainProvider();\n      setProvider(phantomMultiChainProvider);\n    };\n    getPhantomMultiChainProvider();\n  }, []);\n\n  if (!provider) {\n    return <NoProvider />;\n  }\n\n  return <StatelessApp {...props} />;\n};\n\nexport default App;\n","import { PhantomInjectedProvider, SupportedEVMChainIds, TLog } from '../types';\nimport { PublicKey } from '@solana/web3.js';\nimport { getChainName } from './index';\nimport { silentlyConnect } from './connect';\n\nexport function setupEvents(\n  { solana, ethereum }: PhantomInjectedProvider,\n  createLog: (log: TLog) => void,\n  setEthereumChainId: (chainId: SupportedEVMChainIds) => void,\n  setEthereumSelectedAddress: (address: string) => void,\n) {\n  // handle solana `connect` event\n  solana.on('connect', (publicKey: PublicKey) => {\n    createLog({\n      providerType: 'solana',\n      status: 'success',\n      method: 'connect',\n      message: `Connected to account ${publicKey.toBase58()}`,\n    });\n  });\n\n  // handle ethereum `connect` event\n  ethereum.on('connect', (connectionInfo: { chainId: SupportedEVMChainIds }) => {\n    createLog({\n      providerType: 'ethereum',\n      status: 'success',\n      method: 'connect',\n      message: `Connected to ${getChainName(connectionInfo.chainId)} (Chain ID: ${connectionInfo.chainId})`,\n    });\n  });\n\n  // handle solana `disconnect` event\n  solana.on('disconnect', () => {\n    createLog({\n      providerType: 'solana',\n      status: 'warning',\n      method: 'disconnect',\n      message: '👋 Goodbye',\n    });\n  });\n\n  // handle ethereum `disconnect` event\n  ethereum.on('disconnect', () => {\n    createLog({\n      providerType: 'ethereum',\n      status: 'warning',\n      method: 'disconnect',\n      message: '⚠️ Lost connection to the RPC',\n    });\n  });\n\n  // handle ethereum `accountsChanged` event\n  ethereum.on('accountsChanged', (newAccounts: string[]) => {\n    // if we're still connected, Phantom will return an array with 1 account\n    if (newAccounts.length > 0) {\n      console.log('GOT SOME', newAccounts);\n      setEthereumSelectedAddress(newAccounts[0]);\n      createLog({\n        providerType: 'ethereum',\n        status: 'info',\n        method: 'accountsChanged',\n        message: `Switched to account ${newAccounts[0]}`,\n      });\n    } else {\n      /**\n       * In this case dApps could...\n       *\n       * 1. Not do anything\n       * 2. Only re-connect to the new account if it is trusted\n       * 3. Always attempt to reconnect (NOT RECOMMENDED) MULTI-CHAIN PROVIDER TIP\n       */\n\n      createLog({\n        providerType: 'solana',\n        status: 'info',\n        method: 'accountChanged',\n        message: 'Attempting to switch accounts.',\n      });\n\n      // attempt to reconnect silently\n      silentlyConnect({ solana, ethereum }, createLog);\n    }\n  });\n\n  // handle solana accountChanged event\n  solana.on('accountChanged', (publicKey: PublicKey | null) => {\n    // if we're still connected, Phantom will pass the publicKey of the new account\n    if (publicKey) {\n      createLog({\n        providerType: 'solana',\n        status: 'info',\n        method: 'accountChanged',\n        message: `Switched to account ${publicKey.toBase58()}`,\n      });\n    } else {\n      /**\n       * In this case dApps could...\n       *\n       * 1. Not do anything\n       * 2. Only re-connect to the new account if it is trusted\n       * 3. Always attempt to reconnect (NOT RECOMMENDED) MULTI-CHAIN PROVIDER TIP\n       */\n\n      createLog({\n        providerType: 'solana',\n        status: 'info',\n        method: 'accountChanged',\n        message: 'Attempting to switch accounts.',\n      });\n\n      // attempt to reconnect silently\n      silentlyConnect({ solana, ethereum }, createLog);\n    }\n\n    // handle ethereum chainChanged event\n    ethereum.on('chainChanged', (chainId: SupportedEVMChainIds) => {\n      setEthereumChainId(chainId);\n      createLog({\n        providerType: 'ethereum',\n        status: 'info',\n        method: 'chainChanged',\n        message: `Switched to ${getChainName(chainId)} (Chain ID: ${chainId})`,\n      });\n    });\n  });\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}